Assignment-4
------------
Q1.interface Shape {
    void draw();
}

class Circle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a circle");
    }
}

class Rectangle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a rectangle");
    }
}

public class InterfaceExample {
    public static void main(String[] args) {
        Shape circle = new Circle();
        circle.draw();      // Output: Drawing a circle

        Shape rectangle = new Rectangle();
        rectangle.draw();   // Output: Drawing a rectangle
    }
}

Q2.abstract class Parent {
    public void concreteMethod1() {
        System.out.println("Concrete Method 1");
    }

    public void concreteMethod2() {
        System.out.println("Concrete Method 2");
    }

    public abstract void abstractMethod1();

    public abstract void abstractMethod2();
}

class Child extends Parent {
    @Override
    public void abstractMethod1() {
        System.out.println("Abstract Method 1 implementation in Child class");
    }

    @Override
    public void abstractMethod2() {
        System.out.println("Abstract Method 2 implementation in Child class");
    }
}

public class AbstractMethodExample {
    public static void main(String[] args) {
        Child child = new Child();
        child.concreteMethod1();     // Output: Concrete Method 1
        child.concreteMethod2();     // Output: Concrete Method 2
        child.abstractMethod1();     // Output: Abstract Method 1 implementation in Child class
        child.abstractMethod2();     // Output: Abstract Method 2 implementation in Child class
    }
}
Q3.@FunctionalInterface
interface MathOperation {
    int operate(int a, int b);
}

public class FunctionalInterfaceExample {
    public static void main(String[] args) {
        MathOperation addition = (a, b) -> a + b;
        int result = addition.operate(5, 3);
        System.out.println("Result: " + result);    // Output: 8
    }
}
Q4. An interface in Java is a reference type that defines a contract of methods that a class implementing the interface must follow.
It acts as a blueprint for classes to provide the implementation of the methods defined in the interface.
Interfaces can contain constant fields and default methods in addition to abstract methods.

Q5. The use of interfaces in Java is to achieve abstraction and provide a way to achieve multiple inheritance of type. 
It allows classes to implement multiple interfaces, enabling them to inherit the behaviors defined by those interfaces. 
Interfaces are also used to establish a contract between different parts of a program.

Q6. Lambda expressions in Java 8 are a concise way to represent anonymous functions. 
They allow you to write more compact code by expressing behavior as a method argument or code block.
Lambda expressions are typically used in functional interfaces, which are interfaces with a single abstract method.

Q7. Yes, lambda expressions can be passed as arguments to methods. This is possible when the method parameter is of a functional interface type,
meaning the interface has a single abstract method. The lambda expression provides an implementation for that method.

Q8. A functional interface in Java 8 is an interface that has only one abstract method.
It is also known as a Single Abstract Method (SAM) type or a functional interface.
Functional interfaces are used to leverage lambda expressions and method references in Java 8's functional programming features.

Q9. The benefits of lambda expressions in Java 8 include:

Concise syntax: Lambda expressions allow you to write compact and expressive code, reducing boilerplate code.
Readability: They improve code readability by focusing on the behavior rather than the mechanics of implementation.
Functional programming: Lambda expressions facilitate functional programming paradigms, enabling you to write code in a more declarative and expressive style.
Code reuse: Lambda expressions promote code reuse and enable the passing of behavior as data.
Parallelism and concurrency: They support parallel programming by easily enabling the use of multi-threading and asynchronous programming.

Q10. No, it is not mandatory for a lambda expression to have parameters.
Lambda expressions can have zero or more parameters depending on the functional interface they are associated with.
For example, a lambda expression with no parameters would have an empty parameter list: () -> { /* code */ }.